#define ODD(_NAME, _SRC) \
   group { name: _NAME; \
      inherit: _SRC; \
      parts { \
         part { name: "base"; \
            description { state: "default" 0.0; \
               color_class: "list_item_base_odd"; \
            } \
         } \
      } \
   }
#define COMPRESS(_NAME, _SRC) \
   group { name: _NAME; \
      inherit: _SRC; \
      parts { \
         part { name: "elm.text"; \
            description { state: "default" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
            description { state: "selected" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
            description { state: "disabled" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
         } \
         part { name: "label2"; \
            description { state: "default" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
            description { state: "selected" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
            description { state: "disabled" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
         } \
         part { name: "label3"; \
            description { state: "default" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
            description { state: "selected" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
            description { state: "disabled" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
         } \
      } \
   }
#define COMPRESS_ODD(_NAME, _SRC) \
   group { name: _NAME; \
      inherit: _SRC; \
      parts { \
         part { name: "elm.text"; \
            description { state: "default" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
            description { state: "selected" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
            description { state: "disabled" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
         } \
         part { name: "label2"; \
            description { state: "default" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
            description { state: "selected" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
            description { state: "disabled" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
         } \
         part { name: "label3"; \
            description { state: "default" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
            description { state: "selected" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
            description { state: "disabled" 0.0; \
               text.min: 0 1; \
               text.ellipsis: 0.0; \
            } \
         } \
         part { name: "base"; \
            description { state: "default" 0.0; \
               color_class: "list_item_base_odd"; \
            } \
         } \
      } \
   }

group { name: "elm/list/item/default";
   data.item: "selectraise" "off";
   data.item: "focusraise" "off";

#define SELECTED 1
#define HOVER 2
   script {
      public it_state;
      public eval_state(s) {
         // Progams dont work! Why?
         // stop_programs_on(PART:"sel_base");
         if (s & SELECTED) {
            set_state(PART:"sel_base", "selected", 0.0);
            set_state(PART:"sel_border", "selected", 0.0);
            // run_program(PROGRAM:"base_selected");
         } else if (s & HOVER) {
            set_state(PART:"sel_base", "hover", 0.0);
            set_state(PART:"sel_border", "selected", 0.0);
            // run_program(PROGRAM:"base_hover");
         } else {
            set_state(PART:"sel_base", "default", 0.0);
            set_state(PART:"sel_border", "selected", 0.0);
            // run_program(PROGRAM:"base_default");
         }

      }
   }

   parts {
      part { name: "event"; type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "base"; type: RECT; mouse_events: 0;
         description { state: "default" 0.0;
            color_class: "list_item_base";
         }
         description { state: "odd" 0.0;
            color_class: "list_item_base_odd";
         }
      }
      program {
         signal: "elm,state,odd"; source: "elm";
         action: STATE_SET "odd" 0.0;
         target: "base";
      }
      program {
         signal: "elm,state,even"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "base";
      }
      part { name: "sel_border"; mouse_events: 0; type: RECT;
         description { state: "default" 0.0;
            color_class: "list_item_border";
            rel.to: "sel_base";
         }
         description { state: "selected";
            inherit: "default" 0.0;
            color_class: "list_item_border_selected";
         }
         description { state: "hover";
            inherit: "default";
            color_class: "list_item_border_hover";

         }
      }
      part { name: "sel_base"; mouse_events: 0; type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.offset: 0 1;
            rel2.offset: 0 -1;
            color_class: "list_item_base";
         }
         description { state: "selected";
            inherit: "default" 0.0;
            // color: 255 255 255 255;
            color_class: "list_item_base_selected";
         }
         description { state: "hover";
            inherit: "default";
            // color: 255 255 255 255;
            color_class: "list_item_base_hover";

         }
      }
      program { name: "base_selected";
         action: STATE_SET "selected" 0.0;
         target: "sel_base";
         target: "sel_border";
         // transition: SINUSOIDAL 0.1;
      }
      program { name: "base_hover";
         action: STATE_SET "hover" 0.0;
         target: "sel_border";
         target: "sel_base";
         transition: SINUSOIDAL 0.2;
      }
      program { name: "base_default";
         action: STATE_SET "default" 0.0;
         target: "sel_border";
         target: "sel_base";
         transition: SINUSOIDAL 0.2;
      }
      program {
         signal: "mouse,in"; source: "event";
         script {
            new s = get_int(it_state);
            set_int(it_state, s |= HOVER);
            eval_state(s);
         }
      }
      program {
         signal: "mouse,out"; source: "event";
         script {
            new s = get_int(it_state);
            set_int(it_state, s &= ~HOVER);
            eval_state(s);
         }
      }
      program {
         signal: "elm,state,selected"; source: "elm";
         script {
            new s = get_int(it_state);
            set_int(it_state, s |= SELECTED);
            eval_state(s);
         }
      }
      program {
         signal: "elm,state,unselected"; source: "elm";
         script {
            new s = get_int(it_state);
            set_int(it_state, s &= ~SELECTED);
            eval_state(s);
         }
      }
      program {
         signal: "elm,state,disabled"; source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "event";
      }
      program {
         signal: "elm,state,enabled"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "event";
      }

      //##//
      part { name: "elm.text"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.offset: 2 3;
            rel1.relative: 1.0 0.0;
            rel1.to_x: "elm.swallow.icon";
            rel2.offset: -3 -3;
            rel2.relative: 0.0 1.0;
            rel2.to_x: "elm.swallow.end";
            color_class: "list_item_text";
            text { font: FN; size: FNSIZE;
               min: 1 1;
               ellipsis: -1;
               align: 0.0 0.5;
               text_class: "list_item";
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "label2"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            color_class: "list_item_text_disabled";
            text { font: FN; size: FNSIZE;
               text_source: "elm.text";
               align: 0.0 0.5;
               text_class: "list_item";
            }
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "label3"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            color_class: "list_item_text_selected";
            text { font: FN; size: FNSIZE;
               text_source: "elm.text";
               align: 0.0 0.5;
               text_class: "list_item";
            }
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      program {
         signal: "elm,state,selected"; source: "elm";
         action: STATE_SET "selected" 0.0;
         target: "elm.text";
         target: "label2";
         target: "label3";
      }
      program {
         signal: "elm,state,unselected"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
         target: "label2";
         target: "label3";
      }
      program {
         signal: "elm,state,disabled"; source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
         target: "label2";
         target: "label3";
      }
      program {
         signal: "elm,state,enabled"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
         target: "label2";
         target: "label3";
      }
      //##//
      part { name: "elm.swallow.icon"; type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 0.0 0.5;
            aspect: 1.0 1.0;
            rel1.offset: 2 2;
            rel2.relative: 0.0 1.0;
            rel2.offset: 2 -3;
         }
      }
      part { name: "elm.swallow.end"; type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 0;
            align: 1.0 0.5;
            aspect: 1.0 1.0;
            rel1.offset: -3 2;
            rel1.relative: 1.0 0.0;
            rel2.offset: -3 -3;
         }
      }
      //##//
      part { name: "event_block"; type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      program {
         signal: "elm,state,disabled"; source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "event_block";
      }
      program {
         signal: "elm,state,enabled"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "event_block";
      }
   }
}
ODD("elm/list/item_odd/default", "elm/list/item/default")
COMPRESS("elm/list/item_compress/default", "elm/list/item/default")
COMPRESS_ODD("elm/list/item_compress_odd/default", "elm/list/item/default")

// XXX: DO:
// elm/list/h_item/default
// elm/list/h_item_odd/default
// elm/list/h_item_compress/default
// elm/list/h_item_compress_odd/default














group { name: "elm/list/h_item/default";
   data.item: "selectraise" "off";
   data.item: "focusraise" "off";

   script {
      public it_state;
      public eval_state(s) {
         if (s & SELECTED) {
            set_state(PART:"sel_base", "selected", 0.0);
         } else if (s & HOVER) {
            set_state(PART:"sel_base", "hover", 0.0);
         } else {
            set_state(PART:"sel_base", "default", 0.0);
         }

      }
   }
   parts {
      part { name: "event"; type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "base"; type: RECT; mouse_events: 0;
         description { state: "default" 0.0;
            color_class: "list_item_base";
         }
         description { state: "odd" 0.0;
            color_class: "list_item_base_odd";
         }
      }
      program {
         signal: "elm,state,odd"; source: "elm";
         action: STATE_SET "odd" 0.0;
         target: "base";
      }
      program {
         signal: "elm,state,even"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "base";
      }
      part { name: "sel_border"; mouse_events: 0; type: RECT;
         description { state: "default" 0.0;
            color_class: "list_item_base_hover";
            visible: 0;
         }
         description { state: "selected";
            inherit: "default" 0.0;
            color_class: "list_item_base_selected";
            visible: 1;
         }
         description { state: "hover";
            inherit: "default";
            visible: 1;
         }
      }
      part { name: "sel_base"; mouse_events: 0; type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            rel1.offset: 1 0;
            rel2.offset: -1 0;
            color_class: "list_item_base_hover";
            visible: 0;
         }
         description { state: "selected";
            inherit: "default" 0.0;
            color_class: "list_item_base_selected";
            visible: 1;
         }
         description { state: "hover";
            inherit: "default";
            visible: 1;
         }
      }
      program {
         signal: "mouse,in"; source: "event";
         script {
            new s = get_int(it_state);
            set_int(it_state, s |= HOVER);
            eval_state(s);
         }
      }
      program {
         signal: "mouse,out"; source: "event";
         script {
            new s = get_int(it_state);
            set_int(it_state, s &= ~HOVER);
            eval_state(s);
         }
      }
      program {
         signal: "elm,state,selected"; source: "elm";
         script {
            new s = get_int(it_state);
            set_int(it_state, s |= SELECTED);
            eval_state(s);
         }
      }
      program {
         signal: "elm,state,unselected"; source: "elm";
         script {
            new s = get_int(it_state);
            set_int(it_state, s &= ~SELECTED);
            eval_state(s);
         }
      }
      program {
         signal: "elm,state,disabled"; source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "event";
      }
      program {
         signal: "elm,state,enabled"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "event";
      }

      //##//
      part { name: "elm.text"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.offset: 2 2;
            rel1.relative: 0.0 1.0;
            rel1.to_y: "elm.swallow.icon";
            rel2.offset: -3 -3;
            rel2.relative: 1.0 0.0;
            rel2.to_y: "elm.swallow.end";
            color_class: "list_item_text";
            text { font: FN; size: FNSIZE;
               min: 1 1;
               ellipsis: -1;
               align: 0.5 0.5;
               text_class: "list_item";
            }
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "label2"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.to: "elm.text";
            rel2.to: "elm.text";
            color_class: "list_item_text_disabled";
            text { font: FN; size: FNSIZE;
               text_source: "elm.text";
               align: 0.5 0.5;
               text_class: "list_item";
            }
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "label3"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.offset: -2 -3;
            rel1.to: "elm.text";
            rel2.offset: 1 1;
            rel2.to: "elm.text";
            color_class: "list_item_text_selected";
            text { font: FN; size: FNSIZE;
               text_source: "elm.text";
               align: 0.5 0.5;
               text_class: "list_item";
            }
            visible: 0;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      program {
         signal: "elm,state,selected"; source: "elm";
         action: STATE_SET "selected" 0.0;
         target: "elm.text";
         target: "label2";
         target: "label3";
      }
      program {
         signal: "elm,state,unselected"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
         target: "label2";
         target: "label3";
      }
      program {
         signal: "elm,state,disabled"; source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "elm.text";
         target: "label2";
         target: "label3";
      }
      program {
         signal: "elm,state,enabled"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "elm.text";
         target: "label2";
         target: "label3";
      }
      //##//
      part { name: "elm.swallow.icon"; type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            aspect: 1.0 1.0;
            align: 0.5 0.0;
            rel1.offset: 2 2;
            rel2.relative: 1.0 0.0;
            rel2.offset: -3 2;
         }
      }
      part { name: "elm.swallow.end"; type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 0 1;
            aspect: 1.0 1.0;
            align: 0.5 1.0;
            rel1.offset: 2 -3;
            rel1.relative: 0.0 1.0;
            rel2.offset: -3 -3;
         }
      }
      //##//
      part { name: "event_block"; type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            visible: 0;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      program {
         signal: "elm,state,disabled"; source: "elm";
         action: STATE_SET "disabled" 0.0;
         target: "event_block";
      }
      program {
         signal: "elm,state,enabled"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "event_block";
      }
   }
}
ODD("elm/list/h_item_odd/default", "elm/list/h_item/default")
COMPRESS("elm/list/h_item_compress/default", "elm/list/h_item/default")
COMPRESS_ODD("elm/list/h_item_compress_odd/default", "elm/list/h_item/default")

#undef SELECTED
#undef HOVER

#undef ODD
#undef COMPRESS
#undef COMPRESS_ODD
