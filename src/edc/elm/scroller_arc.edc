group { name: "elm/scroller/base/default";
   alias: "elm/list/base/default";
   alias: "elm/genlist/base/default";
   alias: "elm/gengrid/base/default";
   alias: "elm/scroller/base/map_bubble";
   alias: "elm/genscroller/base/default";
   alias: "elm/scroller/base/popup/default";
   alias: "elm/scroller/base/popup/transparent";

   images.image: "scroller-vertical-3px@4.png" COMP;
   images.image: "scroller-horizontal-3px@4.png" COMP;

   data.item: "focus_highlight" "on";

   script {
      public loop_x, loop_y;
      public action_on_pos_vbar(val) {
         new x, y , w, h, x1, y1 , w1, h1;

         get_geometry(PART:"y_vbar_up", x,y,w, h);
         get_geometry(PART:"y_vbar_up_mapper", x1,y1,w1, h1);

         get_geometry(PART:"y_vbar_down", x,y,w, h);
         get_geometry(PART:"y_vbar_down_mapper", x1,y1,w1, h1);

         if(val < 10)
            timer(0.1,"action_on_pos_vbar", val+1);
      }

      public action_on_pos_hbar(val) {
         new x, y , w, h, x1, y1 , w1, h1;

         get_geometry(PART:"x_hbar_left", x,y,w, h);
         get_geometry(PART:"x_hbar_left_mapper", x1,y1,w1, h1);

         get_geometry(PART:"x_hbar_right", x,y,w, h);
         get_geometry(PART:"x_hbar_right_mapper", x1,y1,w1, h1);

         if(val < 10)
            timer(0.1,"action_on_pos_hbar", val+1);
      }

#define PRESSED 1
#define HOVER   2
      // TODO: make these scripts work properly, dont know why they dont!
      // public sc_v_mode;
      // public eval_v_mode(m) {
      //    new p = m & PRESSED;
      //    new h = m & HOVER;
      //    if (!p) {
      //       if (!h) {
      //          set_state(PART:"base_vbar", "default", 0.0);
      //       }
      //       else {
      //          set_state(PART:"base_vbar", "hover", 0.0);
      //       }
      //      }
      //    else {
      //         set_state(PART:"base_vbar", "clicked", 0.0);
      //    }
      // }
      // public sc_h_mode;
      // public eval_h_mode(m) {
      //    new p = m & PRESSED;
      //    new h = m & HOVER;
      //    if (!p) {
      //       if (!h) {
      //          set_state(PART:"base_hbar", "default", 0.0);
      //       }
      //       else {
      //          set_state(PART:"base_hbar", "hover", 0.0);
      //       }
      //      }
      //    else {
      //         set_state(PART:"base_hbar", "clicked", 0.0);
      //    }
      // }
   }

   parts {
      program {
         signal: "load"; source: "";
         script {
            emit("reload", "elm");
            action_on_pos_vbar(0);
            action_on_pos_hbar(0);
         }
      }
// vert bar ////////////////////////////////////////////////////////////////
      part { name: "sb_vbar_show"; type: RECT;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "sb_vbar"; type: RECT;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 12 21;
            max: 12 99999;
            align: 1.0 0.0;
            rel1.relative: 1.0 0.0;
            rel1.offset: -1 1;
            rel2.relative: 1.0 0.0;
            rel2.to_y: "sb_hbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 0 99999;
         }
      }
      part { name: "sb_vbar_base"; type: RECT;
         clip_to: "sb_vbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.to: "sb_vbar";
            rel2.to: "sb_vbar";
            fixed: 1 1;
         }
      }
      part { name: "sb_vbar_p1"; type: RECT;
         clip_to: "sb_vbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 0.0 0.0;
            rel1.to: "sb_vbar";
            rel2.relative: 1.0 0.0;
            rel2.to: "elm.dragable.vbar";
            fixed: 1 1;
         }
      }
      part { name: "sb_vbar_p2"; type: RECT;
         clip_to: "sb_vbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 0.0 1.0;
            rel1.to: "elm.dragable.vbar";
            rel2.relative: 0.0 0.0;
            rel2.to: "sb_vbar";
            fixed: 1 1;
         }
      }
      part { name: "elm.dragable.vbar"; type: RECT;
         clip_to: "sb_vbar";
         scale: 1;
         dragable.x: 0 0 0;
         dragable.y: 1 1 0;
         dragable.confine: "sb_vbar_base";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 12 21;
            max: 12 99999;
            rel1.relative: 0.5  0.5;
            rel1.to: "sb_vbar_base";
            rel2.relative: 0.5  0.5;
            rel2.to: "sb_vbar_base";
            color: 0 0 0 0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
         description { state: "clicked" 0.0;
            inherit: "default" 0.0;
            color_class: "scroller_bar_active";
         }
      }
      part { name: "y_vbar_up_mapper"; type: SPACER;
         scale: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            min: 4 2;
            max: 4 2;
            fixed: 1 1;
            align: 0.0 0.0;
            rel1.to: "sb_vbar_base";
            rel2.to: "sb_vbar_base";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 0 0;
         }
      }
      part { name: "y_vbar_up"; type: SPACER;
         scale: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            min: 4 2;
            max: 4 2;
            fixed: 1 1;
            align: 0.0 0.0;
            rel1.to: "elm.dragable.vbar";
            rel2.to: "elm.dragable.vbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 0 0;
         }
      }
      part { name: "y_vbar_down_mapper"; type: SPACER;
         scale: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            min: 4 2;
            max: 4 2;
            fixed: 1 1;
            align: 0.0 1.0;
            rel1.to: "sb_vbar_base";
            rel2.to: "sb_vbar_base";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 0 0;
         }
      }
      part { name: "y_vbar_down"; type: SPACER;
         scale: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            min: 4 2;
            max: 4 2;
            fixed: 1 1;
            align: 0.0 1.0;
            rel1.to: "elm.dragable.vbar";
            rel2.to: "elm.dragable.vbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 0 0;
         }
      }
      program {
         signal: "elm,action,show,vbar"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "sb_vbar";
         target: "sb_vbar_show";
         target: "elm.dragable.vbar";
         target: "y_vbar_up_mapper";
         target: "y_vbar_up";
         target: "y_vbar_down_mapper";
         target: "y_vbar_down";
         after: "check_pos_vbar";
      }
      program {
         signal: "elm,action,hide,vbar"; source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "sb_vbar";
         target: "sb_vbar_show";
         target: "elm.dragable.vbar";

         target: "y_vbar_up_mapper";
         target: "y_vbar_up";
         target: "y_vbar_down_mapper";
         target: "y_vbar_down";
      }
      program { name: "drag_up";
         action: DRAG_VAL_STEP 0.0 -1.0;
         target: "elm.dragable.vbar";
      }
      program {
         signal: "mouse,down,1*"; source: "sb_vbar_p1";
         action: DRAG_VAL_PAGE 0.0 -1.0;
         target: "elm.dragable.vbar";
      }
      program {
         signal: "mouse,down,1*"; source: "sb_vbar_p2";
         action: DRAG_VAL_PAGE  0.0 1.0;
         target: "elm.dragable.vbar";
      }
      program {
         signal: "elm,action,scroll"; source: "elm";
         script {
            action_on_pos_vbar(10);
         }
      }
      program { name: "check_pos_vbar";
         script {
            action_on_pos_vbar(10);
         }
      }
      program { name: "loop_set_vbar";
         signal: "elm,loop_y,set"; source: "elm";
         script {
            set_int(loop_y, 1);
            action_on_pos_vbar(10);
         }
      }
      program { name: "loop_unset_vbar";
         signal: "elm,loop_y,unset"; source: "elm";
         script {
            set_int(loop_y, 0);
            action_on_pos_vbar(10);
         }
      }

// horiz bar /////////////////////////////////////////////////////////////
      part { name: "sb_hbar_show"; type: RECT;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "sb_hbar"; type: RECT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 21 12;
            max: 99999 12;
            align: 0.0 1.0;
            rel1.relative: 0.0 1.0;
            rel1.offset: 0 -1;
            rel2.relative: 0.0 1.0;
            rel2.to_x: "sb_vbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 99999 0;
         }
      }

      part { name: "sb_hbar_base"; type: RECT;
         clip_to: "sb_hbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.to: "sb_hbar";
            rel2.to: "sb_hbar";
            fixed: 1 1;
         }
      }
      part { name: "sb_hbar_p1"; type: RECT;
         clip_to: "sb_hbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 0.0 0.0;
            rel1.to: "sb_hbar";
            rel2.relative: 0.0 1.0;
            rel2.to: "elm.dragable.hbar";
            fixed: 1 1;
         }
      }
      part { name: "sb_hbar_p2"; type: RECT;
         clip_to: "sb_hbar";
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.relative: 1.0 0.0;
            rel1.to: "elm.dragable.hbar";
            // rel2.relative: 0.0 0.0;
            rel2.to: "sb_hbar"; //TODO
            fixed: 1 1;
         }
      }
      part { name: "elm.dragable.hbar"; type: RECT;
         clip_to: "sb_hbar";
         scale: 1;
         dragable.x: 1 1 0;
         dragable.y: 0 0 0;
         dragable.confine: "sb_hbar_base";
         description { state: "default" 0.0;
            fixed: 1 1;
            min: 21 12;
            max: 99999 12;
            rel1.relative: 0.5  0.5;
            rel1.to: "sb_hbar_base";
            rel2.relative: 0.5  0.5;
            rel2.to: "sb_hbar_base";
            color: 0 0 0 0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
         }
         description { state: "clicked" 0.0;
            inherit: "default" 0.0;
            color_class: "scroller_bar_active";
         }
      }
      part { name: "x_hbar_left_mapper"; type: SPACER;
         scale: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            min: 2 4;
            max: 2 4;
            fixed: 1 1;
            align: 0.0 1.0;
            rel1.to: "sb_hbar_base";
            rel2.to: "sb_hbar_base";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 0 0;
         }
      }
      part { name: "x_hbar_left"; type: SPACER;
         scale: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            min: 2 4;
            max: 2 4;
            fixed: 1 1;
            align: 0.0 1.0;
            rel1.to: "elm.dragable.hbar";
            rel2.to: "elm.dragable.hbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 0 0;
         }
      }
      part { name: "x_hbar_right_mapper"; type: SPACER;
         scale: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            min: 2 4;
            max: 2 4;
            fixed: 1 1;
            align: 1.0 1.0;
            rel1.to: "sb_hbar_base";
            rel2.to: "sb_hbar_base";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 0 0;
         }
      }
      part { name: "x_hbar_right"; type: SPACER;
         scale: 1;
         repeat_events: 1;
         description { state: "default" 0.0;
            min: 2 4;
            max: 2 4;
            fixed: 1 1;
            align: 1.0 1.0;
            rel1.to: "elm.dragable.hbar";
            rel2.to: "elm.dragable.hbar";
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            min: 0 0;
            max: 0 0;
         }
      }
      program {
         signal: "elm,action,show,hbar"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "sb_hbar";
         target: "sb_hbar_show";
         target: "elm.dragable.hbar";
         target: "x_hbar_left_mapper";
         target: "x_hbar_left";
         target: "x_hbar_right_mapper";
         target: "x_hbar_right";
         after: "check_pos_hbar";
      }
      program {
         signal: "elm,action,hide,hbar"; source: "elm";
         action: STATE_SET "hidden" 0.0;
         target: "sb_hbar";
         target: "sb_hbar_show";
         target: "elm.dragable.hbar";
         target: "x_hbar_left_mapper";
         target: "x_hbar_left";
         target: "x_hbar_right_mapper";
         target: "x_hbar_right";
      }
      program {
         signal: "mouse,down,1*"; source: "sb_hbar_p1";
         action: DRAG_VAL_PAGE -1.0 0.0;
         target: "elm.dragable.hbar";
         after: "check_pos_hbar";
      }
      program {
         signal: "mouse,down,1*"; source: "sb_hbar_p2";
         action: DRAG_VAL_PAGE  1.0 0.0;
         target: "elm.dragable.hbar";
         after: "check_pos_hbar";
      }
      program {
         signal: "elm,action,scroll"; source: "elm";
         script {
            action_on_pos_hbar(10);
         }
      }
      program { name: "check_pos_hbar";
         script {
            action_on_pos_hbar(10);
         }
      }
      program { name: "loop_set_hbar";
         signal: "elm,loop_x,set"; source: "elm";
         script {
            set_int(loop_x, 1);
            action_on_pos_hbar(10);
         }
      }
      program { name: "loop_unset_hbar";
         signal: "elm,loop_x,unset"; source: "elm";
         script {
            set_int(loop_x, 0);
            action_on_pos_hbar(10);
         }
      }
      part { name: "bg"; type: RECT;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.background";
            rel2.to: "elm.swallow.background";
            color: 0 0 0 0;
            color_class: "scroller_bg";
         }
      }
      part { name: "clipper"; type: RECT;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.background";
            rel2.to: "elm.swallow.background";
         }
      }
      part { name: "elm.swallow.background"; type: SWALLOW;
         clip_to: "clipper";
         description { state: "default" 0.0;
            rel1.offset: 1 1;
            rel2.relative: 0.0 0.0;
            rel2.offset: -2 -2;
            rel2.to_x: "sb_vbar";
            rel2.to_y: "sb_hbar";
         }
      }
      part { name: "elm.swallow.content"; type: SWALLOW;
         clip_to: "clipper";
         description { state: "default" 0.0;
            rel1.offset: 1 1;
            rel2.relative: 0.0 0.0;
            rel2.offset: -2 -2;
            rel2.to_x: "sb_vbar";
            rel2.to_y: "sb_hbar";
         }
      }
      part { name: "elm.swallow.overlay"; type: SWALLOW;
         clip_to: "clipper";
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.content";
            rel2.to: "elm.swallow.content";
         }
      }
      part { name: "base_vbar"; mouse_events: 0;
         scale: 1;
         clip_to: "sb_vbar_show";
         description { state: "default" 0.0;
            rel1.to: "elm.dragable.vbar";
            rel2.to: "elm.dragable.vbar";
            image.normal: "scroller-vertical-3px@4.png";
            image.border: 24 24 24 24;
            image.border_scale: 1;
            image.border_scale_by: 0.25;
            image.middle: SOLID;
            fill.smooth: 1;
            fixed: 1 1;
            color_class: "scroller_bar";
         }
         description { state: "hover" 0.0;
            inherit: "default" 0.0;
            color_class: "scroller_bar_hover";
         }
         description { state: "clicked" 0.0;
            inherit: "default" 0.0;
            color_class: "scroller_bar_active";
         }
      }
      part { name: "base_hbar"; mouse_events: 0;
         scale: 1;
         clip_to: "sb_hbar_show";
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1.to: "elm.dragable.hbar";
            rel2.to: "elm.dragable.hbar";
            image.normal: "scroller-horizontal-3px@4.png";
            image.border: 24 24 24 24;
            image.border_scale: 1;
            image.border_scale_by: 0.25;
            image.middle: SOLID;
            fill.smooth: 1;
            color_class: "scroller_bar";
         }
         description { state: "hover" 0.0;
            inherit: "default" 0.0;
            color_class: "scroller_bar_hover";
         }
         description { state: "clicked" 0.0;
            inherit: "default" 0.0;
            color_class: "scroller_bar_active";
         }

      }
      part { name: "dim_effect"; type: RECT; mouse_events: 0;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "effect" 0.0;
            color: 50 50 50 255;
         }
      }
   }


   programs {
      // programms for arrow down up left right
      // program { name: "sc_v_click_anim";
      //    script {
      //       new m = get_int(sc_v_mode);
      //       m |= PRESSED; set_int(sc_v_mode, m);
      //       eval_v_mode(m);
      //    }
      // }
      // program { name: "sc_v_unclick_anim";
      //    script {
      //       new m = get_int(sc_v_mode);
      //       m &= ~PRESSED; set_int(sc_v_mode, m);
      //       eval_v_mode(m);
      //    }
      // }
      // program { name: "sc_v_hover_anim";
      //    script {
      //       new m = get_int(sc_v_mode);
      //       m |= HOVER; set_int(sc_v_mode, m);
      //       eval_v_mode(m);
      //    }
      // }
      // program { name: "sc_v_unhover_anim";
      //    script {
      //       new m = get_int(sc_v_mode);
      //       m &= ~HOVER; set_int(sc_v_mode, m);
      //       eval_v_mode(m);
      //    }
      // }
      // program { name: "sc_h_click_anim";
      //    script {
      //       new m = get_int(sc_h_mode);
      //       m |= PRESSED; set_int(sc_h_mode, m);
      //       eval_h_mode(m);
      //    }
      // }
      // program { name: "sc_h_unclick_anim";
      //    script {
      //       new m = get_int(sc_h_mode);
      //       m &= ~PRESSED; set_int(sc_h_mode, m);
      //       eval_h_mode(m);
      //    }
      // }
      // program { name: "sc_h_hover_anim";
      //    script {
      //       new m = get_int(sc_h_mode);
      //       m |= HOVER; set_int(sc_h_mode, m);
      //       eval_h_mode(m);
      //    }
      // }
      // program { name: "sc_h_unhover_anim";
      //    script {
      //       new m = get_int(sc_h_mode);
      //       m &= ~HOVER; set_int(sc_h_mode, m);
      //       eval_h_mode(m);
      //    }
      // }
      program {
         signal: "mouse,in"; source: "elm.dragable.vbar";
         action: STATE_SET "hover" 0.0;
         target: "base_vbar";
         // after: "sc_v_hover_anim";
      }
      program {
         signal: "mouse,out"; source: "elm.dragable.vbar";
         action: STATE_SET "default" 0.0;
         target: "base_vbar";
         // after: "sc_v_unhover_anim";
      }
      program {
         signal: "mouse,in"; source: "elm.dragable.hbar";
         action: STATE_SET "hover" 0.0;
         target: "base_hbar";
         // after: "sc_h_hover_anim";
      }
      program {
         signal: "mouse,out"; source: "elm.dragable.hbar";
         action: STATE_SET "default" 0.0;
         target: "base_hbar";
         // after: "sc_h_unhover_anim";
      }
      program {
         signal: "mouse,down,1*"; source: "elm.dragable.vbar";
         action: STATE_SET "clicked" 0.0;
         target: "elm.dragable.vbar";
         target: "base_vbar";
      }
      program {
         signal: "mouse,down,*"; source: "elm.dragable.vbar";
         action: SIGNAL_EMIT "elm,vbar,press" "elm";
         // after: "sc_v_click_anim";
      }
      program {
         signal: "mouse,up,1"; source: "elm.dragable.vbar";
         action: STATE_SET "default" 0.0;
         target: "elm.dragable.vbar";
         target: "base_vbar";
      }
      program {
         signal: "mouse,up,*"; source: "elm.dragable.vbar";
         action: SIGNAL_EMIT "elm,vbar,unpress" "elm";
         // after: "sc_v_unclick_anim";
      }
      program {
         signal: "mouse,down,1*"; source: "elm.dragable.hbar";
         action: STATE_SET "clicked" 0.0;
         target: "elm.dragable.hbar";
         target: "base_hbar";
      }
      program {
         signal: "mouse,down,*"; source: "elm.dragable.hbar";
         action: SIGNAL_EMIT "elm,hbar,press" "elm";
         // after: "sc_h_click_anim";
      }
      program {
         signal: "mouse,up,1"; source: "elm.dragable.hbar";
         action: STATE_SET "default" 0.0;
         target: "elm.dragable.hbar";
         target: "base_hbar";
      }
      program {
         signal: "mouse,up,*"; source: "elm.dragable.hbar";
         action: SIGNAL_EMIT "elm,hbar,unpress" "elm";
         // after: "sc_h_unclick_anim";
      }
      program {
         signal: "elm,action,looping,left"; source: "elm";
         action: STATE_SET "effect" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
         after: "looping,left,done";
      }
      program { name: "looping,left,done";
         action: SIGNAL_EMIT "elm,looping,left,done" "elm";
      }
      program {
         signal: "elm,action,looping,left,end"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
      }
      program {
         signal: "elm,action,looping,right"; source: "elm";
         action: STATE_SET "effect" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
         after: "looping,right,done";
      }
      program { name: "looping,right,done";
         action: SIGNAL_EMIT "elm,looping,right,done" "elm";
      }
      program {
         signal: "elm,action,looping,right,end"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
      }
      program {
         signal: "elm,action,looping,up"; source: "elm";
         action: STATE_SET "effect" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
         after: "looping,up,done";
      }
      program { name: "looping,up,done";
         action: SIGNAL_EMIT "elm,looping,up,done" "elm";
      }
      program {
         signal: "elm,action,looping,up,end"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
      }
      program {
         signal: "elm,action,looping,down"; source: "elm";
         action: STATE_SET "effect" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
         after: "looping,down,done";
      }
      program { name: "looping,down,done";
         action: SIGNAL_EMIT "elm,looping,down,done" "elm";
      }
      program {
         signal: "elm,action,looping,down,end"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.3;
         target: "dim_effect";
      }
   }
}

group { name: "elm/scroller/base/noclip";
   inherit: "elm/scroller/base/default";
   parts {
      part { name: "clipper";
         description { state: "default" 0.0;
            rel1.offset: -999999 -999999;
            rel2.offset: 999999 999999;
         }
      }
      part { name: "elm.swallow.background";
         description { state: "default" 0.0;
            rel1.offset: 0 0;
            rel2.offset: -1 -1;
         }
      }
      part { name: "elm.swallow.content";
         description { state: "default" 0.0;
            rel1.offset: 0 1;
            rel2.offset: -1 -1;
         }
      }
   }
}

group { name: "elm/scroller/contents/default";
   parts {
      part { name: "elm.swallow.content";
         type: SWALLOW;
         description { state: "default" 0.0;
         }
      }
      part { name: "elm.swallow.content_r";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1 {
                relative: 1.0 0.0;
                to: "elm.swallow.content";
            }
            rel2 {
                relative: 2.0 1.0;
                to: "elm.swallow.content";
            }
         }
      }
      part { name: "elm.swallow.content_b";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1 {
                relative: 0.0 1.0;
                to: "elm.swallow.content";
            }
            rel2 {
                relative: 1.0 2.0;
                to: "elm.swallow.content";
            }
         }
      }
      part { name: "elm.swallow.content_rb";
         type: SWALLOW;
         description { state: "default" 0.0;
            fixed: 1 1;
            rel1 {
                relative: 1.0 1.0;
                to: "elm.swallow.content";
            }
            rel2 {
                relative: 2.0 2.0;
                to: "elm.swallow.content";
            }
         }
      }
   }
}

group { name: "elm/scroller/base/popup/no_inset_shadow";
   inherit: "elm/scroller/base/default";
   parts {
      part { name: "elm.swallow.content"; type: SWALLOW;
         description { state: "default" 0.0;
            rel1.offset: 0 0;
            rel2.offset: 0 0;
         }
      }
   }
}

#undef PRESSED
#undef HOVER
